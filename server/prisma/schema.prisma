// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int       @id @default(autoincrement())
  firstName              String
  middleName             String
  lastName               String
  email                  String    @unique
  emailVerificationToken String
  emailVerifiedAt        DateTime
  role                   Role      @default(USER)
  hashedPassword         String
  licesnseNumber         String
  licenseData            Json
  updatedAt              DateTime  @updatedAt
  createdAt              DateTime  @default(now())
  approvedAt             DateTime
  approvedBy             User?     @relation("UserApprovedBy", fields: [approvedById], references: [id])
  approvedById           Int
  approvedUsers          User[]    @relation("UserApprovedBy")
  invitedUsers           Invite[]  @relation("UserInvitedBy")
  acceptedInvites        Invite[]  @relation("UserAcceptedBy")
  revokedInvites         Invite[]  @relation("UserRevokedBy")
  createdPatients        Patient[] @relation("UserCreatedBy")
  updatedPatients        Patient[] @relation("UserUpdatedBy")
}

// The Role enum is used to restrict access to certain operations in your application.
enum Role {
  USER
  ADMIN
}

model Invite {
  id           Int      @id @default(autoincrement())
  firstName    String
  middleName   String
  lastName     String
  email        String   @unique
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  invitedBy    User     @relation("UserInvitedBy", fields: [invitedById], references: [id])
  invitedById  Int
  acceptedBy   User?    @relation("UserAcceptedBy", fields: [acceptedById], references: [id])
  acceptedById Int
  acceptedAt   DateTime
  revokedAt    DateTime
  revokedBy    User?    @relation("UserRevokedBy", fields: [revokedById], references: [id])
  revokedById  Int
}

model Patient {
  id                 Int        @id @default(autoincrement())
  firstName          String
  middleName         String
  lastName           String
  dateOfBirth        DateTime
  gender             Gender
  updatedAt          DateTime   @updatedAt @map("updated_at")
  createdAt          DateTime   @default(now()) @map("created_at")
  createdBy          User       @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById        Int
  updatedBy          User?      @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedById        Int
  language           Language
  codeStatus         CodeStatus
  codeStatusAttached Boolean
  hospital           Hospital   @relation(fields: [hospitalId], references: [id])
  hospitalId         Int
  emergencyContact   Contact    @relation(fields: [emergencyContactId], references: [id])
  emergencyContactId Int        @unique
  physician          Physician  @relation(fields: [physicianId], references: [id])
  physicianId        Int
}

enum Gender {
  NON_BINARY
  MALE
  FEMALE
}

enum Language {
  CHINESE
  RUSSIAN
  SPANISH
}

enum CodeStatus {
  FULL
  DNR
  DNI
  DNR_DNI
}

model Contact {
  id           Int      @id @default(autoincrement())
  first_name   String
  middle_name  String
  last_name    String
  phone        String
  email        String
  address      String
  relationship String
  patient      Patient?
}

model Allergy {
  id     Int          @id @default(autoincrement())
  name   String
  type   AllergyType
  system CodingSystem
  code   String
}

enum AllergyType {
  FOOD
  DRUG
  ENVIRONMENT
  OTHER
}

model Medication {
  id      Int          @id @default(autoincrement())
  name    String
  altName String
  system  CodingSystem
  code    String
}

model Condition {
  id     Int          @id @default(autoincrement())
  name   String
  system CodingSystem
  code   String
}

enum CodingSystem {
  SNOMED
  RXNORM
  ICD10
}

model Physician {
  id         Int        @id @default(autoincrement())
  firstName  String
  middleName String
  lastName   String
  phone      String
  email      String
  hospitals  Hospital[]
  patients   Patient[]
}

model Hospital {
  id         Int         @id @default(autoincrement())
  name       String
  address    String
  phone      String
  email      String
  physicians Physician[]
  patients   Patient[]
}
