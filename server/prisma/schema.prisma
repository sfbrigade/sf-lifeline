// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int     @id @default(autoincrement())
  first_name                String
  middle_name               String
  last_name                 String
  email                     String  @unique
  email_verification_token  String
  email_verified_at         DateTime
  role                      Role    @default(USER)
  hashed_password           String
  licesnse_number           String
  license_data              Json
  updated_at                DateTime @updatedAt
  created_at                DateTime @default(now())
  approved_at               DateTime
  approved_by               User?    @relation("UserApprovedBy", fields: [approved_by_id], references: [id])
  approved_by_id            Int
  approved_users            User[]  @relation("UserApprovedBy")
  invited_users             Invite[] @relation("UserInvitedBy")
  accepted_invites          Invite[] @relation("UserAcceptedBy")
  revoked_invites           Invite[] @relation("UserRevokedBy")
  created_patients          Patient[] @relation("UserCreatedBy")
  updated_patients          Patient[] @relation("UserUpdatedBy")
}

// The Role enum is used to restrict access to certain operations in your application.
enum Role {
  USER
  ADMIN
}

model Invite {
  id                        Int       @id @default(autoincrement())
  first_name                String
  last_name                 String
  email                     String    @unique
  updated_at                DateTime  @updatedAt @map("updated_at")
  created_at                DateTime  @default(now()) @map("created_at")
  expires_at                DateTime
  invited_by                User      @relation("UserInvitedBy", fields: [invited_by_id], references: [id])
  invited_by_id             Int
  accepted_by               User?     @relation("UserAcceptedBy", fields: [accepted_by_id], references: [id])
  accepted_by_id            Int
  accepted_at               DateTime
  revoked_at                DateTime
  revoked_by                User?     @relation("UserRevokedBy", fields: [revoked_by_id], references: [id])
  revoked_by_id             Int
}

model Patient {
  id                        Int       @id @default(autoincrement())
  first_name                String
  middle_name               String
  last_name                 String
  date_of_birth             DateTime
  gender                    Gender
  updated_at                DateTime  @updatedAt @map("updated_at")
  created_at                DateTime  @default(now()) @map("created_at")
  created_by                User      @relation("UserCreatedBy", fields: [created_by_id], references: [id])
  created_by_id             Int
  updated_by                User?     @relation("UserUpdatedBy", fields: [updated_by_id], references: [id])
  updated_by_id             Int
  language                  Language
  code_status               CodeStatus
  code_status_attached      Boolean
  hospital                  Hospital  @relation(fields: [hospital_id], references: [id])
  hospital_id               Int
  emergency_contact         Contact   @relation( fields: [emergency_contact_id], references: [id])
  emergency_contact_id      Int       @unique
  physician                 Physician @relation(fields: [physician_id], references: [id])
  physician_id              Int
}

enum Gender {
  NON_BINARY
  MALE
  FEMALE
}

enum Language {
  CHINESE
  RUSSIAN
  SPANISH
}

enum CodeStatus {
  FULL
  DNR
  DNI
  DNR_DNI
}

model Contact {
  id                        Int       @id @default(autoincrement())
  first_name                String
  middle_name               String
  last_name                 String
  phone                     String
  email                     String
  address                   String
  relationship              String
  patient                   Patient?
}

model Allergy {
  id       Int      @id @default(autoincrement())
  name     String
  type     AllergyType
  system   CodingSystem
  code     String
}

enum AllergyType {
  FOOD
  DRUG
  ENVIRONMENT
  OTHER
}

model Medication {
  id       Int      @id @default(autoincrement())
  name     String
  alt_name String
  system   CodingSystem
  code     String
}

model Condition {
  id       Int      @id @default(autoincrement())
  name     String
  system   CodingSystem
  code     String
}

enum CodingSystem {
  SNOMED
  RXNORM
  ICD10
}

model Physician {
  id                        Int       @id @default(autoincrement())
  first_name                String
  middle_name               String
  last_name                 String
  phone                     String
  email                     String
  hospitals                 Hospital[]
  patients                  Patient[]
}

model Hospital {
  id                        Int       @id @default(autoincrement())
  name                      String
  address                   String
  phone                     String
  email                     String
  physicians                Physician[]
  patients                  Patient[]
}
